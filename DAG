
from airflow import DAG
from datetime import datetime, timedelta
from airflow.operators.python import PythonOperator
import os
import tarfile

default_args = {
    'owner': 'airflow',
    'start_date': datetime(2025, 1, 1),
    'email': ['thepenguinsstore@gmail.com'],
    'email_on_failure': False,
    'email_on_retry': False,
    'retries': 1,
    'retry_delay': timedelta(minutes=5),
}

#Definicion del DAG
dag = DAG(
    dag_id='process_web_log',
    default_args=default_args,
    description='A DAG to process web server access logs daily',
    schedule_interval='@daily',
    catchup=False,
)

#Definicion Extract_data
def extract_data():
    input_path = '/home/project/airflow/dags/capstone/accesslog.txt'
    output_path = '/home/project/airflow/dags/capstone/extracted_data.txt'
    
    with open(input_path, 'r') as infile, open(output_path, 'w') as outfile:
        for line in infile:
            ip = line.split(' ')[0]
            outfile.write(ip + '\n')

#Tarea Extract_data
extract_data_task = PythonOperator(
    task_id='extract_data',
    python_callable=extract_data,
    dag=dag,
)

#Transform_data
def transform_data():
    input_path = '/home/project/airflow/dags/capstone/extracted_data.txt'
    output_path = '/home/project/airflow/dags/capstone/transformed_data.txt'
    ip_to_filter = '198.46.149.143'
    
    with open(input_path, 'r') as infile, open(output_path, 'w') as outfile:
        for line in infile:
            if line.strip() != ip_to_filter:
                outfile.write(line)

transform_data_task = PythonOperator(
    task_id='transform_data',
    python_callable=transform_data,
    dag=dag,
)

#Load_data
def load_data():
    source_file = '/home/project/airflow/dags/capstone/transformed_data.txt'
    output_tar = '/home/project/airflow/dags/capstone/weblog.tar'
    
    with tarfile.open(output_tar, 'w') as tar:
        tar.add(source_file, arcname='transformed_data.txt')

load_data_task = PythonOperator(
    task_id='load_data',
    python_callable=load_data,
    dag=dag,
)


extract_data_task >> transform_data_task >> load_data_task
